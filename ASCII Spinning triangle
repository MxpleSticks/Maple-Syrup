#include <iostream>
#include <cmath>
#include <chrono>
#include <thread>
#include <vector>
#include <string>

#define PI 3.14159265358979323846

void clearScreen() {
#ifdef _WIN32
    system("cls");
#else
    system("clear");
#endif
}

int main() {
    const int width = 40;
    const int height = 20;
    const double radius = 8;
    double angle = 0.0;

    // Triangle vertices relative to center
    std::vector<std::pair<double, double>> triangle = {
        {0, -radius},           // Top vertex
        {radius * cos(2 * PI / 3), radius * sin(2 * PI / 3)},   // Bottom right
        {radius * cos(4 * PI / 3), radius * sin(4 * PI / 3)}    // Bottom left
    };

    while (true) {
        std::vector<std::vector<char>> screen(height, std::vector<char>(width, ' '));

        // Calculate rotated positions
        for (int i = 0; i < 3; i++) {
            double x = triangle[i].first;
            double y = triangle[i].second;

            // Rotate point
            double rotated_x = x * cos(angle) - y * sin(angle);
            double rotated_y = x * sin(angle) + y * cos(angle);

            // Convert to screen coordinates
            int screen_x = static_cast<int>(rotated_x + width / 2);
            int screen_y = static_cast<int>(rotated_y + height / 2);

            // Draw if within bounds
            if (screen_x >= 0 && screen_x < width && screen_y >= 0 && screen_y < height) {
                screen[screen_y][screen_x] = '*';
            }
        }

        // Draw lines between vertices
        for (int i = 0; i < 3; i++) {
            double x1 = triangle[i].first;
            double y1 = triangle[i].second;
            double x2 = triangle[(i + 1) % 3].first;
            double y2 = triangle[(i + 1) % 3].second;

            // Rotate and draw line
            for (double t = 0; t <= 1; t += 0.1) {
                double x = x1 + (x2 - x1) * t;
                double y = y1 + (y2 - y1) * t;

                double rotated_x = x * cos(angle) - y * sin(angle);
                double rotated_y = x * sin(angle) + y * cos(angle);

                int screen_x = static_cast<int>(rotated_x + width / 2);
                int screen_y = static_cast<int>(rotated_y + height / 2);

                if (screen_x >= 0 && screen_x < width && screen_y >= 0 && screen_y < height) {
                    screen[screen_y][screen_x] = '*';
                }
            }
        }

        // Clear screen and display frame
        clearScreen();
        for (const auto& row : screen) {
            for (char c : row) {
                std::cout << c;
            }
            std::cout << '\n';
        }

        // Update angle and sleep
        angle += 0.1;
        if (angle >= 2 * PI) {
            angle -= 2 * PI;
        }

        std::this_thread::sleep_for(std::chrono::milliseconds(50));
    }

    return 0;
}
